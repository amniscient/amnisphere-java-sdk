/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.amniscient.api;

import com.amniscient.api.core.AmniscientApiApiException;
import com.amniscient.api.core.AmniscientApiHttpResponse;
import com.amniscient.api.core.AmniscientException;
import com.amniscient.api.core.ClientOptions;
import com.amniscient.api.core.MediaTypes;
import com.amniscient.api.core.ObjectMappers;
import com.amniscient.api.core.RequestOptions;
import com.amniscient.api.errors.BadRequestError;
import com.amniscient.api.errors.UnauthorizedError;
import com.amniscient.api.requests.DetectRequest;
import com.amniscient.api.requests.LoadModelRequest;
import com.amniscient.api.types.DetectResponse;
import com.amniscient.api.types.UnauthorizedErrorBody;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawAmniscientApiClient {
    protected final ClientOptions clientOptions;

    public AsyncRawAmniscientApiClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Initializes a model for inference. This endpoint must be called before running any detections.
     */
    public CompletableFuture<AmniscientApiHttpResponse<List<String>>> loadModel(
            String modelId, LoadModelRequest request) {
        return loadModel(modelId, request, null);
    }

    /**
     * Initializes a model for inference. This endpoint must be called before running any detections.
     */
    public CompletableFuture<AmniscientApiHttpResponse<List<String>>> loadModel(
            String modelId, LoadModelRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("load-model")
                .addPathSegment(modelId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new AmniscientException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<AmniscientApiHttpResponse<List<String>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new AmniscientApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), new TypeReference<List<String>>() {}),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, UnauthorizedErrorBody.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new AmniscientApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new AmniscientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new AmniscientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Detects an object within an uploaded image file. Make sure to load the model you're using for detection first!
     */
    public CompletableFuture<AmniscientApiHttpResponse<DetectResponse>> detect(File file, DetectRequest request) {
        return detect(file, request, null);
    }

    /**
     * Detects an object within an uploaded image file. Make sure to load the model you're using for detection first!
     */
    public CompletableFuture<AmniscientApiHttpResponse<DetectResponse>> detect(
            File file, DetectRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("detect")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            body.addFormDataPart(
                    "organization_id", ObjectMappers.JSON_MAPPER.writeValueAsString(request.getOrganizationId()));
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<AmniscientApiHttpResponse<DetectResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new AmniscientApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), DetectResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        if (response.code() == 400) {
                            future.completeExceptionally(new BadRequestError(
                                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response));
                            return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new AmniscientApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new AmniscientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new AmniscientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
