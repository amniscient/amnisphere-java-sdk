/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.amniscient.api;

import com.amniscient.api.core.ClientOptions;
import com.amniscient.api.core.RequestOptions;
import com.amniscient.api.requests.DetectRequest;
import com.amniscient.api.requests.LoadModelRequest;
import com.amniscient.api.types.DetectResponse;
import java.io.File;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncAmniscientApiClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawAmniscientApiClient rawClient;

    public AsyncAmniscientApiClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawAmniscientApiClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawAmniscientApiClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Initializes a model for inference. This endpoint must be called before running any detections.
     */
    public CompletableFuture<List<String>> loadModel(String modelId, LoadModelRequest request) {
        return this.rawClient.loadModel(modelId, request).thenApply(response -> response.body());
    }

    /**
     * Initializes a model for inference. This endpoint must be called before running any detections.
     */
    public CompletableFuture<List<String>> loadModel(
            String modelId, LoadModelRequest request, RequestOptions requestOptions) {
        return this.rawClient.loadModel(modelId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Detects an object within an uploaded image file. Make sure to load the model you're using for detection first!
     */
    public CompletableFuture<DetectResponse> detect(File file, DetectRequest request) {
        return this.rawClient.detect(file, request).thenApply(response -> response.body());
    }

    /**
     * Detects an object within an uploaded image file. Make sure to load the model you're using for detection first!
     */
    public CompletableFuture<DetectResponse> detect(File file, DetectRequest request, RequestOptions requestOptions) {
        return this.rawClient.detect(file, request, requestOptions).thenApply(response -> response.body());
    }

    public static AsyncAmniscientApiClientBuilder builder() {
        return new AsyncAmniscientApiClientBuilder();
    }
}
